package com.example.hackdukevoicetest;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.lang.*;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import org.apache.http.HttpResponse;
import org.apache.http.impl.client.DefaultHttpClient;


import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.speech.RecognitionListener;
import android.speech.RecognizerIntent;
import android.speech.SpeechRecognizer;
import android.speech.tts.TextToSpeech.OnInitListener;
import android.speech.tts.TextToSpeech;   
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.Toast;
import android.widget.TextView;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

/**
 * SpeechRepeatActivity
 * - processes speech input 
 * - presents user with list of suggested words
 * - when user selects a word from the list, the app speaks the word back using the TTS engine 
 */
public class MainActivity extends Activity implements OnClickListener, OnInitListener,RecognitionListener{
	
	private static final int VR_REQUEST = 1234;
    private int MY_DATA_CHECK_CODE = 0;
    private TextToSpeech repeatTTS; 
	private ListView wordList;

	int flagVar[] = new int[3];
	String eventRetStr="",dateRetStr="",timeRetStr="";
	
	SQLiteDatabase dbObj = null;
    
    String TableName = "events";
	
	int connCount=0;
	ArrayList <String> matches;
	int initDialogueFlag = 0;
	String response;
	
	public int dateTimeVal;
	
	/* speech recognizer variables */
	
	private SpeechRecognizer speechRecognizer;
	
	
    /** Create the Activity, prepare to process speech and repeat */
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	super.onCreate(savedInstanceState);
    	for(int i=0;i<3;i++)
    		flagVar[i] = 0;
    	
    	
    	//call superclass
        super.onCreate(savedInstanceState);
        //set content view
        setContentView(R.layout.activity_main);

        //gain reference to speak button
        Button speechBtn = (Button) findViewById(R.id.speechButton);
        //gain reference to word list
        wordList = (ListView) findViewById(R.id.wordList);
        
        // speech recognizer 
        
        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(getApplicationContext());
        speechRecognizer.setRecognitionListener(this);
        
        //database entries

        // database creation
        
       
        //find out whether speech recognition is supported
        PackageManager packManager = getPackageManager();
        List<ResolveInfo> intActivities = packManager.queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH), 0);
        if (intActivities.size() != 0) {
        	//speech recognition is supported - detect user button clicks
            speechBtn.setOnClickListener(this);
            //prepare the TTS to repeat chosen words
            Intent checkTTSIntent = new Intent();  
            //check TTS data  
            checkTTSIntent.setAction(TextToSpeech.Engine.ACTION_CHECK_TTS_DATA);  
            //start the checking Intent - will retrieve result in onActivityResult
            startActivityForResult(checkTTSIntent, MY_DATA_CHECK_CODE); 
        }
        else {
        	//speech recognition not supported, disable button and output message
            speechBtn.setEnabled(false);
            Toast.makeText(this, "Oops - Speech recognition not supported!", Toast.LENGTH_LONG).show();
        }
        
        //detect user clicks of suggested words
        wordList.setOnItemClickListener(new OnItemClickListener() {
        	
        	//click listener for items within list
        	public void onItemClick(AdapterView<?> parent, View view, int position, long id) 
            {
            	
    	    	boolean speakingEnd = repeatTTS.isSpeaking();
    			do{
    			   speakingEnd = repeatTTS.isSpeaking();
    			} while (speakingEnd);	
        		
        		//cast the view
            	TextView wordView = (TextView)view;
            	//retrieve the chosen word
            	String wordChosen = (String) wordView.getText();
           	
            	//dialogueControl(wordChosen);
               	
            }
        });
    }
    
    
    public void speakCall(String wordChosen){
    	
    	String text = wordChosen;
    	//text = matches.get(0).toString();
    	if (text!=null) {
            if (!repeatTTS.isSpeaking()) {
                repeatTTS.speak(text, TextToSpeech.QUEUE_FLUSH, null);
            }
        }    	
    }
    
    int initialDialogueCount=0;
    
    public void initialDialogue(){
		ttsCheck();
    	String text = "Hello, How may I help you today";
		repeatTTS.speak(text, TextToSpeech.QUEUE_FLUSH, null);
		if (text!=null) {
            if (!repeatTTS.isSpeaking()) {
                repeatTTS.speak(text, TextToSpeech.QUEUE_FLUSH, null);
            }
        }
		ttsCheck();
		initDialogueFlag = 1;
    }

    /* Background thread for initial dialogue */
    
    Thread initDialogueThread = new Thread(){
    	@Override
    	public void run(){
    		try{
    			initialDialogue();
    			sleep(1000);
    		}catch(InterruptedException e){
    			e.printStackTrace();
    		}
    	}
    };
    
    
	/**
     * Called when the user presses the speak button
     */
    
    int tempVar =0;
    
    public void onClick(View v) {
    		//initDialogueThread.start();
    		if(initDialogueFlag == 0)
    			initialDialogue();
    		if(initDialogueFlag == 0)
    			initialDialogue();
    		listenToSpeech();
    		tempVar++;
			//new AsyncTaskActivity().execute("http://54.201.35.119:8000/rawParser/origin/raleigh");
			//Toast.makeText(MainActivity.this,response, Toast.LENGTH_SHORT).show();
    }
     
    
    /**
     * Instruct the app to listen for user speech input
     */
    private void listenToSpeech() {
    	
    	ttsCheck();	
    	//start the speech recognition intent passing required data
    	Intent listenIntent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
    	//indicate package
    	listenIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, getClass().getPackage().getName());
    	//message to display while listening
    	listenIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, "Say a word!");
    	//set speech model
    	listenIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
    	//specify number of results to retrieve
    	listenIntent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 10);

    	//start listening
        startActivityForResult(listenIntent, VR_REQUEST);      
    }
    
    /**
     * onActivityResults handles:
     *  - retrieving results of speech recognition listening
     *  - retrieving result of TTS data check
     */
    String t="";
    @Override
   
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    	//check speech recognition result 
        if (requestCode == VR_REQUEST && resultCode == RESULT_OK) 
        {
        	//store the returned word list as an ArrayList
            matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
            
            /* temp code for TTS */
            
            String text = matches.get(0).toString();
            //Toast.makeText(this, text, Toast.LENGTH_LONG).show();
            //speakCall(text);
            ttsCheck();
            
            if(flagVar[0]==1 && flagVar[1]==1 && flagVar[2]==1 && text.toLowerCase().indexOf("yes")>=0){
            	
            	//entry 
            	
            	try{
            		
            		dbObj = openOrCreateDatabase("hackduke.db", MODE_PRIVATE, null);
            		
            		dbObj.execSQL("CREATE TABLE IF NOT EXISTS "+TableName+" (eventName VARCHAR, eventTime INT(9));");
            		
  //dbObj.close();
                	speakCall("I am here");
                	dateTimeVal = 123;	
                	dbObj.execSQL("INSERT INTO "+TableName+" VALUES('"+eventRetStr+"',"+dateTimeVal+");");
                	//queries
                	speakCall("hello world");
                	Cursor c = dbObj.rawQuery("SELECT * FROM "+ TableName+" WHERE eventTime = "+dateTimeVal+;",null);
                	c.moveToFirst();
                	/*String eventNameGet = c.getString(col1);
        			int eventTime = c.getInt(col2);
        			String queryResult = ""+eventNameGet+" "+eventTime+".";
        			
        			Toast.makeText(this, queryResult, Toast.LENGTH_LONG).show();
        			ttsCheck();
        			speakCall(queryResult);
        			
        			//testing DB Values
        			
        			ArrayList<String> tempArrayList = new ArrayList<String>();
            		tempArrayList.add(queryResult);
            		wordList.setAdapter(new ArrayAdapter<String> (this, android.R.layout.simple_list_item_1, tempArrayList));
                
                	*/
                	//validating results
                	c.moveToFirst();
                	if(c!=null){
                		//loop through results
                		do{
                			int col1 = c.getColumnIndex("eventName");
                        	int col2 = c.getColumnIndex("eventTime");
                        	
                			String eventName = c.getString(col1);
                			int eventTime = c.getInt(col2);
                			String queryResult = ""+eventName+" "+eventTime+".";
                			
                			Toast.makeText(this, queryResult, Toast.LENGTH_LONG).show();
                			speakCall(queryResult);
                			
                			//testing DB Values
                			
                			ArrayList<String> tempArrayList = new ArrayList<String>();
                    		tempArrayList.add(queryResult);
                    		wordList.setAdapter(new ArrayAdapter<String> (this, android.R.layout.simple_list_item_1, tempArrayList));
                        
                		}while(c.moveToNext());
                		
                	}
            		// DatabaseHandler db = new DatabaseHandler(this);
            		// speakCall("DB hahaha");
            		// SQLiteDatabase sb = 
            		// db.getWritableDatabase();
            		 //db.onCreate(db);
                	speakCall("DB works");
            	
            	}catch(Exception e){

                	speakCall(e.toString());
            		Log.e("Error","Error",e);
                }/*finally{
                	if(dbObj!=null)
                		dbObj.close();
                }*/
                
            
            }else if(flagVar[0]==1 && flagVar[1]==1 && flagVar[2]==1 && text.toLowerCase().indexOf("no")>=0){
            	for(int i=0;i<3;i++)
            		flagVar[i]=0;
            	String str = "Ok, let's start again. How may I help you!";
            	speakCall(str);
            	ttsCheck();
            	listenToSpeech();
            }
            
            
            if(flagVar[0]==0)
            	eventRetStr = getEvent(text);
            if(flagVar[1]==0)
            	dateRetStr = getDate(text);
            if(flagVar[2] == 0)
            	timeRetStr = getTime(text);
            if(t=="")
            t=timeRetStr;
         
            String toSpeak = "You have "+eventRetStr +" on "+ dateRetStr +" at "+ timeRetStr;
            
            
            if(eventRetStr.length()==0 && flagVar[0]!=1){
            	String str = "I am sorry, I didn't get that. What were you talking about!!";
            	speakCall(str);
            	ttsCheck();
            	listenToSpeech();
            }
            
            if(eventRetStr.length()>0){
            	flagVar[0]=1;
            	if(dateRetStr.indexOf(eventRetStr)>0)
            		dateRetStr="";
            	if(dateRetStr.length()==0){
            		String str = "Ok, I see you have"+ eventRetStr +". When is the event?";
            		speakCall(str);
            		
            		ttsCheck();
            		listenToSpeech();
            	}else if(dateRetStr.length()>0){
            		flagVar[1] = 1;
            		timeRetStr = t;
            		if(timeRetStr.length()==0){
            			String str = "At what time is your "+eventRetStr+" on "+ dateRetStr; 
            			speakCall(str);
                		ttsCheck();
                		listenToSpeech();
            		}else if(timeRetStr.length()>0){
            			flagVar[2] = 1;
            			String str = "Ok, so you have a "+eventRetStr +" on "+dateRetStr+" at "+ timeRetStr + 
            					" Is that correct, please say yes or no??";
            			speakCall(str);
                		ttsCheck();
                		listenToSpeech();
            		}
            	}
            }
            
            
            speakCall("");

            
            /*int returnValue = eventParser(text);
            
            if(returnValue == 1){
            	String str = "You have a session, Is that correct?";
            	speakCall(str);
            }
            else if(returnValue == 0){
            	String str = "You spoke gibberish";
            	speakCall(str);
            }
            else if(returnValue==2){
            	String str = "Please give further inputs";
            	speakCall(str);
            }
            else if(returnValue == 3){
            	String str = "Ok, let's start over? How may I help you";
            	speakCall(str);
            }
            else{
            	String str = "App finish, go home";
            	speakCall(str);
            			
            }
            
            */
            
            ttsCheck();
            
            try {
				Thread.sleep(700);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
            
            //listenToSpeech();
            	
            
            //set the retrieved list to display in the ListView using an ArrayAdapter
            //wordList.setAdapter(new ArrayAdapter<String> (this, android.R.layout.simple_list_item_1, matches));

        }
        
        //returned from TTS data check
        if (requestCode == MY_DATA_CHECK_CODE) 
        {  
	        //we have the data - create a TTS instance
	        if (resultCode == TextToSpeech.Engine.CHECK_VOICE_DATA_PASS)  
	        	repeatTTS = new TextToSpeech(this, this);  
	        //data not installed, prompt the user to install it  
	        else 
	        {  
	        	//intent will take user to TTS download page in Google Play
	        	Intent installTTSIntent = new Intent();  
	        	installTTSIntent.setAction(TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);  
	        	startActivity(installTTSIntent);  
	        }  
        }

        //call superclass method
        super.onActivityResult(requestCode, resultCode, data);
    }
    
    /**
     * onInit fires when TTS initializes
     */
    public void onInit(int initStatus) { 
    	//if successful, set locale
    	 if (initStatus == TextToSpeech.SUCCESS)   
    	  repeatTTS.setLanguage(Locale.US);//***choose your own locale here***
    	   
    }
    
    public void ttsCheck(){

    
    	boolean speakingEnd = repeatTTS.isSpeaking();
		do{
		   speakingEnd = repeatTTS.isSpeaking();
		} while (speakingEnd);
		
    }
    




	@Override
	public void onBeginningOfSpeech() {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void onBufferReceived(byte[] buffer) {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void onEndOfSpeech() {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void onError(int error) {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void onEvent(int eventType, Bundle params) {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void onPartialResults(Bundle partialResults) {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void onReadyForSpeech(Bundle params) {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void onResults(Bundle results) {
		// TODO Auto-generated method stub
		ArrayList strList = results.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
		
	}




	@Override
	public void onRmsChanged(float rmsdB) {
		// TODO Auto-generated method stub
		
	}
    
    // parser
	
	public int customParser(String s){
		
		if(s.indexOf("session")>=0){
			return 1;
		}
		else if(s.indexOf("yes")>=0){
			return 2;
		}
		else if(s.indexOf("no")>=0){
			return 3;
		}
		else{
			return 5;
		}
		
	}
    
	//time parser
	
	public String getTime(String text){
		String delims = "[ ]+",time="";
		String[] tokens = text.split(delims);
		for(int i=0;i<tokens.length-1;i++){
			tokens[i].toLowerCase();
			//System.out.println(((int)tokens[i].charAt(0)-48)+ " "+tokens[i]+" "+tokens[i+1]);
			if(((int)tokens[i].charAt(0)-48)>0 && ((int)tokens[i].charAt(0)-48)<10 && (tokens[i+1].equals("a.m.") || tokens[i+1].equals("p.m.") || tokens[i+1].equals("in"))){
				//System.out.println(tokens[i]);
				if(!tokens[i+1].equals("in"))
				time=tokens[i]+" "+tokens[i+1];
				else{
					String am="a.m.";
					if(tokens[i+3].equals("night") || tokens[i+3].equals("evening") || tokens[i+3].equals("afternoon"))
						am="p.m.";						
					time=tokens[i]+" "+am;
				}
				if(tokens[i].equals("in")){
					if(tokens[i+2].equals("night") )
						time="9 p.m.";
					if(tokens[i+2].equals("morning"))
						time="8 a.m.";
					if(tokens[i+2].equals("afternoon"))
						time="2 p.m.";
					if(tokens[i+2].equals("evening"))
						time="6 p.m.";
					break;
				
				}
				break;
			}
			if(tokens[i].equals("in"))
			{
				if(tokens[i+2].equals("night") )
					time="9 p.m.";
				if(tokens[i+2].equals("morning"))
					time="8 a.m.";
				if(tokens[i+2].equals("afternoon"))
					time="2 p.m.";
				if(tokens[i+2].equals("evening"))
					time="6 p.m.";
				break;
			
			}
		}
		//System.out.println(time);
		return time;
	}

	
	// date parser
	
	public String getDate(String text)
	{
		String date="",delims = "[ ]+";
		String[] tokens = text.split(delims);
		String arr[]={"January","February","March","April","May","June","July","August","September","October","November","December"};
		Date d = new Date();
		int day = Integer.parseInt((new SimpleDateFormat("dd").format(d)).toString());
		int month= Integer.parseInt((new SimpleDateFormat("MM").format(d)).toString());
		for(int i=0;i<tokens.length;i++){
			tokens[i].toLowerCase();
			if(tokens[i].equals("tomorrow") || tokens[i].equals("day") || tokens[i].equals("on")){
				if(tokens[i].equals("on")){
					//System.out.println(tokens[i]);
					int k=i+1;
					while(k!=tokens.length){
						if(!tokens[k].equals("at") && !tokens[k].equals("in"))
							date+=tokens[k]+" ";
						else
							break;
						k++;
					}
				}
				
				if(tokens[i].equals("day")){
					if(tokens[i+1].equals("after") && tokens[i+2].equals("tomorrow"))
					  day+=2;
					if(day>30){
						day=day%30;
						month++;
						if(month>12)
							month=1;
					}
					date=arr[month-1]+" "+day;
				}
				if(tokens[i].equals("tomorrow")){
					//if(tokens[i+1]=="after" && tokens[i+2]=="tomorrow")
					  day+=1;
					if(day>30){
						day=day%30;
						month++;
						if(month>12)
							month=1;
					}
					date=arr[month-1]+" "+day;
				}
				break;
			}
			
		}
		int k=0;
		if(date.equals("")){
			while(k!=tokens.length){
				if(!tokens[k].equals("at") && !tokens[k].equals("in"))
					date+=tokens[k]+" ";
				else
					break;
				k++;
			}
			if(k==tokens.length){
				date = "";
			}
		}
		return date;
	}
	
	//event parser
	public String getEvent(String text){
		String event="",delims = "[ ]+";
		String[] tokens = text.split(delims);
		int f=-1;
		for(int i=0;i<tokens.length;i++){
			tokens[i].toLowerCase();
			if(tokens[i].equals("a") || tokens[i].equals("an")){
				//System.out.println(tokens[i]);
				f=i;
				break;
			}
			
		}
		int k=f+1;
		while(k!=tokens.length){
			//System.out.println(tokens[k]);
			if(!tokens[k].equals("at") && !tokens[k].equals("in") && !tokens[k].equals("tomorrow") && !tokens[k].equals("day") && !tokens[k].equals("on"))
				event+=tokens[k]+" ";
			else
				break;
			k++;
		}
		//break;
		return event;
	}
	//end of parsers
	
}













